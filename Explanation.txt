A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.
The world is modeled as a 2-D array of cells, where 0 represents uninfected cells, and 1 represents cells contaminated with the virus. 
A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.
Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. 
Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the 
most uninfected cells the following night. There will never be a tie.
Can you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.

Input Description:
First line contains, N the size of the 2D array. (2<N<1000)
Rest line contains, NxN 2D array as integers 1's and 0's.

Output Description:
Print the number of walls used.

Sample Input:
3
1 1 1
1 0 1
1 1 1

Sample Output:
4

Explanation:
Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.

Sample Input:
2
1 0
1 1

Sample Output:
2

Sample Input:
4
0 1 0 1
1 1 1 1
0 0 1 1
0 1 1 1

Sample Output:
10

Sample Input:
5
1 1 0 0 1
1 1 1 1 0
0 0 0 1 1
1 1 1 1 1
0 0 0 0 1

Sample Output:
18

Sample Input:
4
1 1 1 0
0 0 0 1
1 1 0 0
0 0 0 0

Sample Output:
8

Sample Input:
6
1 0 1 0 1 1
0 0 0 1 1 1
1 1 1 0 0 0
0 0 0 1 1 1
1 1 1 1 0 0
0 0 0 1 1 1

Sample Output:
16
